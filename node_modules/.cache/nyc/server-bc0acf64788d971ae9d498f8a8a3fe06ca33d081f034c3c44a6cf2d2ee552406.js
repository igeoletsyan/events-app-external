'use strict';function cov_vam9bdwp8(){var path="/home/user104/events-app/external/server.js";var hash="5b867a0ed2710fe504e44e3855b64591ef04580f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/user104/events-app/external/server.js",statementMap:{"0":{start:{line:3,column:0},end:{line:3,column:58}},"1":{start:{line:5,column:15},end:{line:5,column:80}},"2":{start:{line:9,column:16},end:{line:9,column:34}},"3":{start:{line:13,column:19},end:{line:13,column:41}},"4":{start:{line:19,column:15},end:{line:19,column:51}},"5":{start:{line:23,column:14},end:{line:23,column:32}},"6":{start:{line:26,column:12},end:{line:26,column:21}},"7":{start:{line:29,column:0},end:{line:29,column:30}},"8":{start:{line:30,column:0},end:{line:33,column:4}},"9":{start:{line:38,column:25},end:{line:38,column:67}},"10":{start:{line:42,column:0},end:{line:79,column:3}},"11":{start:{line:48,column:4},end:{line:78,column:11}},"12":{start:{line:56,column:12},end:{line:77,column:13}},"13":{start:{line:57,column:16},end:{line:57,column:45}},"14":{start:{line:58,column:16},end:{line:62,column:23}},"15":{start:{line:65,column:16},end:{line:65,column:45}},"16":{start:{line:66,column:16},end:{line:66,column:76}},"17":{start:{line:67,column:16},end:{line:67,column:34}},"18":{start:{line:68,column:16},end:{line:76,column:23}},"19":{start:{line:82,column:0},end:{line:104,column:7}},"20":{start:{line:91,column:8},end:{line:102,column:15}},"21":{start:{line:101,column:16},end:{line:101,column:34}},"22":{start:{line:108,column:0},end:{line:131,column:7}},"23":{start:{line:118,column:8},end:{line:129,column:15}},"24":{start:{line:128,column:16},end:{line:128,column:34}},"25":{start:{line:135,column:0},end:{line:157,column:7}},"26":{start:{line:144,column:8},end:{line:155,column:15}},"27":{start:{line:154,column:16},end:{line:154,column:34}},"28":{start:{line:166,column:0},end:{line:169,column:3}},"29":{start:{line:167,column:4},end:{line:167,column:29}},"30":{start:{line:168,column:4},end:{line:168,column:51}},"31":{start:{line:172,column:21},end:{line:172,column:79}},"32":{start:{line:173,column:15},end:{line:178,column:2}},"33":{start:{line:174,column:17},end:{line:174,column:41}},"34":{start:{line:175,column:17},end:{line:175,column:38}},"35":{start:{line:177,column:4},end:{line:177,column:66}},"36":{start:{line:180,column:0},end:{line:180,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:42,column:13},end:{line:42,column:14}},loc:{start:{line:42,column:27},end:{line:79,column:1}},line:42},"1":{name:"(anonymous_1)",decl:{start:{line:55,column:8},end:{line:55,column:9}},loc:{start:{line:55,column:35},end:{line:78,column:9}},line:55},"2":{name:"(anonymous_2)",decl:{start:{line:85,column:4},end:{line:85,column:5}},loc:{start:{line:85,column:18},end:{line:104,column:5}},line:85},"3":{name:"(anonymous_3)",decl:{start:{line:100,column:12},end:{line:100,column:13}},loc:{start:{line:100,column:18},end:{line:102,column:13}},line:100},"4":{name:"(anonymous_4)",decl:{start:{line:111,column:4},end:{line:111,column:5}},loc:{start:{line:111,column:18},end:{line:131,column:5}},line:111},"5":{name:"(anonymous_5)",decl:{start:{line:127,column:12},end:{line:127,column:13}},loc:{start:{line:127,column:18},end:{line:129,column:13}},line:127},"6":{name:"(anonymous_6)",decl:{start:{line:138,column:4},end:{line:138,column:5}},loc:{start:{line:138,column:18},end:{line:157,column:5}},line:138},"7":{name:"(anonymous_7)",decl:{start:{line:153,column:12},end:{line:153,column:13}},loc:{start:{line:153,column:18},end:{line:155,column:13}},line:153},"8":{name:"(anonymous_8)",decl:{start:{line:166,column:8},end:{line:166,column:9}},loc:{start:{line:166,column:33},end:{line:169,column:1}},line:166},"9":{name:"(anonymous_9)",decl:{start:{line:173,column:40},end:{line:173,column:41}},loc:{start:{line:173,column:46},end:{line:178,column:1}},line:173}},branchMap:{"0":{loc:{start:{line:5,column:15},end:{line:5,column:80}},type:"cond-expr",locations:[{start:{line:5,column:36},end:{line:5,column:54}},{start:{line:5,column:57},end:{line:5,column:80}}],line:5},"1":{loc:{start:{line:56,column:12},end:{line:77,column:13}},type:"if",locations:[{start:{line:56,column:12},end:{line:77,column:13}},{start:{line:56,column:12},end:{line:77,column:13}}],line:56},"2":{loc:{start:{line:66,column:43},end:{line:66,column:74}},type:"binary-expr",locations:[{start:{line:66,column:43},end:{line:66,column:51}},{start:{line:66,column:55},end:{line:66,column:74}}],line:66},"3":{loc:{start:{line:172,column:21},end:{line:172,column:79}},type:"cond-expr",locations:[{start:{line:172,column:48},end:{line:172,column:72}},{start:{line:172,column:75},end:{line:172,column:79}}],line:172}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5b867a0ed2710fe504e44e3855b64591ef04580f"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_vam9bdwp8=function(){return actualCoverage;};}return actualCoverage;}cov_vam9bdwp8();cov_vam9bdwp8().s[0]++;console.log(`process.env.SERVER = ${process.env.SERVER}`);// get the environment variable, but default to localhost:8082 if its not set
const SERVER=(cov_vam9bdwp8().s[1]++,process.env.SERVER?(cov_vam9bdwp8().b[0][0]++,process.env.SERVER):(cov_vam9bdwp8().b[0][1]++,"http://localhost:8082"));// express is a nodejs web server
// https://www.npmjs.com/package/express
const express=(cov_vam9bdwp8().s[2]++,require('express'));// converts content in the request into parameter req.body
// https://www.npmjs.com/package/body-parser
const bodyParser=(cov_vam9bdwp8().s[3]++,require('body-parser'));// express-handlebars is a templating library 
// https://www.npmjs.com/package/express-handlebars
// - look inside the views folder for the templates
// data is inserted into a template inside {{ }}
const engine=(cov_vam9bdwp8().s[4]++,require('express-handlebars').engine);// request is used to make REST calls to the backend microservice
// details here: https://www.npmjs.com/package/request
var request=(cov_vam9bdwp8().s[5]++,require('request'));// create the server
const app=(cov_vam9bdwp8().s[6]++,express());// set up handlbars as the templating engine
cov_vam9bdwp8().s[7]++;app.set('view engine','hbs');cov_vam9bdwp8().s[8]++;app.engine('hbs',engine({extname:'hbs',defaultView:'default'}));// set up the parser to get the contents of data from html forms 
// this would be used in a POST to the server as follows:
// app.post('/route', urlencodedParser, (req, res) => {}
const urlencodedParser=(cov_vam9bdwp8().s[9]++,bodyParser.urlencoded({extended:false}));// defines a route that receives the request to /
cov_vam9bdwp8().s[10]++;app.get('/',(req,res)=>{cov_vam9bdwp8().f[0]++;cov_vam9bdwp8().s[11]++;// make a request to the backend microservice using the request package
// the URL for the backend service should be set in configuration 
// using an environment variable. Here, the variable is passed 
// to npm start inside package.json:
//  "start": "SERVER=http://localhost:8082 node server.js",
request.get(// first argument: url + return format
{url:SERVER+'/events',// the microservice end point for events
json:true// response from server will be json format
},// second argument: function with three args,
// runs when server response received
// body hold the return from the server
(error,response,body)=>{cov_vam9bdwp8().f[1]++;cov_vam9bdwp8().s[12]++;if(error){cov_vam9bdwp8().b[1][0]++;cov_vam9bdwp8().s[13]++;console.log('error:',error);// Print the error if one occurred
cov_vam9bdwp8().s[14]++;res.render('error_message',{layout:'default',//the outer html page
error:error// pass the data from the server to the template
});}else{cov_vam9bdwp8().b[1][1]++;cov_vam9bdwp8().s[15]++;console.log('error:',error);// Print the error if one occurred
cov_vam9bdwp8().s[16]++;console.log('statusCode:',(cov_vam9bdwp8().b[2][0]++,response)&&(cov_vam9bdwp8().b[2][1]++,response.statusCode));// Print the response status code if a response was received
cov_vam9bdwp8().s[17]++;console.log(body);// print the return from the server microservice
cov_vam9bdwp8().s[18]++;res.render('home',{layout:'default',//the outer html page
template:'index-template',// the partial view inserted into 
// {{body}} in the layout - the code
// in here inserts values from the JSON
// received from the server
events:body.events});// pass the data from the server to the template
}});});// defines a route that receives the post request to /event
cov_vam9bdwp8().s[19]++;app.post('/event',urlencodedParser,// second argument - how to parse the uploaded content
// into req.body
(req,res)=>{cov_vam9bdwp8().f[2]++;cov_vam9bdwp8().s[20]++;// make a request to the backend microservice using the request package
// the URL for the backend service should be set in configuration 
// using an environment variable. Here, the variable is passed 
// to npm start inside package.json:
//  "start": "SERVER=http://localhost:8082 node server.js",
request.post(// first argument: url + data + formats
{url:SERVER+'/event',// the microservice end point for adding an event
body:req.body,// content of the form
headers:{// uploading json
"Content-Type":"application/json"},json:true// response from server will be json format
},()=>{cov_vam9bdwp8().f[3]++;cov_vam9bdwp8().s[21]++;res.redirect("/");// redirect to the home page on successful response
});});// defines a route that receives the post request to /event/like to like the event
cov_vam9bdwp8().s[22]++;app.post('/event/like',urlencodedParser,// second argument - how to parse the uploaded content
// into req.body
(req,res)=>{cov_vam9bdwp8().f[4]++;cov_vam9bdwp8().s[23]++;// make a request to the backend microservice using the request package
// the URL for the backend service should be set in configuration 
// using an environment variable. Here, the variable is passed 
// to npm start inside package.json:
//  "start": "BACKEND_URL=http://localhost:8082 node server.js",
// changed to a put now that real data is being updated
request.put(// first argument: url + data + formats
{url:SERVER+'/event/like',// the microservice end point for liking an event
body:req.body,// content of the form
headers:{// uploading json
"Content-Type":"application/json"},json:true// response from backend will be json format
},()=>{cov_vam9bdwp8().f[5]++;cov_vam9bdwp8().s[24]++;res.redirect("/");// redirect to the home page on successful response
});});// defines a route that receives the delete request to /event/like to unlike the event
cov_vam9bdwp8().s[25]++;app.post('/event/unlike',urlencodedParser,// second argument - how to parse the uploaded content
// into req.body
(req,res)=>{cov_vam9bdwp8().f[6]++;cov_vam9bdwp8().s[26]++;// make a request to the backend microservice using the request package
// the URL for the backend service should be set in configuration 
// using an environment variable. Here, the variable is passed 
// to npm start inside package.json:
//  "start": "BACKEND_URL=http://localhost:8082 node server.js",
request.delete(// first argument: url + data + formats
{url:SERVER+'/event/like',// the microservice end point for liking an event
body:req.body,// content of the form
headers:{// uploading json
"Content-Type":"application/json"},json:true// response from backend will be json format
},()=>{cov_vam9bdwp8().f[7]++;cov_vam9bdwp8().s[27]++;res.redirect("/");// redirect to the home page on successful response
});});// create other get and post methods here - version, login,  etc
// generic error handling
cov_vam9bdwp8().s[28]++;app.use((err,req,res,next)=>{cov_vam9bdwp8().f[8]++;cov_vam9bdwp8().s[29]++;console.error(err.stack);cov_vam9bdwp8().s[30]++;res.status(500).json({message:err.message});});// specify the port and start listening
const SERVICE_PORT=(cov_vam9bdwp8().s[31]++,process.env.SERVICE_PORT?(cov_vam9bdwp8().b[3][0]++,process.env.SERVICE_PORT):(cov_vam9bdwp8().b[3][1]++,8080));const server=(cov_vam9bdwp8().s[32]++,app.listen(SERVICE_PORT,()=>{cov_vam9bdwp8().f[9]++;const host=(cov_vam9bdwp8().s[33]++,server.address().address);const port=(cov_vam9bdwp8().s[34]++,server.address().port);cov_vam9bdwp8().s[35]++;console.log(`Events app listening at http://${host}:${port}`);}));cov_vam9bdwp8().s[36]++;module.exports=app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,